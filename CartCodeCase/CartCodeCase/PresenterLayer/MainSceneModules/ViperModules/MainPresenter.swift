//
//  MainPresenter.swift
//  CartCodeCase
//
//  Created by Erkut Bas on 20.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class MainPresenter {

    // MARK: - Private properties -

    private unowned let view: MainViewInterface
    private let formatter: MainFormatterInterface
    private let interactor: MainInteractorInterface
    private let wireframe: MainWireframeInterface
    
    private let networkManager = NetworkFactoryManager()
    private let warningFactory = WarningComponentFactory()
    private var callBack = CartListCallBack()

    // MARK: - Lifecycle -

    init(view: MainViewInterface, formatter: MainFormatterInterface, interactor: MainInteractorInterface, wireframe: MainWireframeInterface) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
        
//        subscribeNetworkManager()

    }
    
    private func getCartList() {
        callBack.commonResult(completion: cartListResponseListener)
        interactor.getCartListData(parameters: CartListRequest(), callBack: callBack)
    }
    
    private lazy var cartListResponseListener: (Result<CartListResponse, ErrorResponse>) -> Void = { [weak self] result in
        self?.handleCartListResponse(with: result)
    }
    
    private func handleCartListResponse(with result: Result<CartListResponse, ErrorResponse>) {
        switch result {
        case .failure(let error):
            print("cartList error : \(error)")
        case .success(let data):
            print("cartList data : \(data)")
            sendResponseToCoreData(response: data)
            formatter.setData(with: data)
            view.informViewToLoadData()
        }
    }
    
    private func sendResponseToCoreData(response: CartListResponse) {
        guard let data = response.products else { return }
        interactor.saveToCoreData(data: data)
    }
    
    private func checkCoreData() {
        let data = CoreDataManager.shared.fetch(CartListEntity.self)
        formatter.setData(with: data)

        if data.isEmpty {
            fireAlert(type: .noData)
        } else {
            fireAlert(type: .savedDataExists)
        }
        
    }
    
    private func subscribeNetworkManager() {
        networkManager.getNetworkManagerInstance().subscribeNetworkListener { [weak self](state) in
            
            print("BURADAYIM 2")
            
            switch state {
            case .offline:
                print("offline")
                DispatchQueue.main.async {
                    self?.checkCoreData()
                }
            case .online:
                print("online")
                self?.getCartList()
                self?.view.activateWarningView(with: nil)
            }
        }
    }
    
    private func fireAlert(type: WarningTypes) {
        
        DispatchQueue.main.async { [weak self] in
            switch type {
            case .noData:
                self?.wireframe.displayWarning(controller: AlertControllerGenerator.noNetwork(AlertControllerData(actions: [AlertActionData(actionHandler: self?.noNetworkAction)])).value, completion: nil)
            case .savedDataExists:
                self?.wireframe.displayWarning(controller: AlertControllerGenerator.savedData(AlertControllerData(actions: [AlertActionData(actionHandler: self?.savedDataExistsAction)])).value, completion: nil)
            default:
                break
            }
        }
        
    }
    
    private lazy var noNetworkAction: ((UIAlertAction) -> Void)? = { [weak self] action in
        guard let data = self?.warningFactory.getWarningComponent(type: .noData) else { return }
        self?.view.activateWarningView(with: data)
    }
    
    private lazy var savedDataExistsAction: ((UIAlertAction) -> Void)? = { [weak self] action in
        guard let data = self?.warningFactory.getWarningComponent(type: .noData) else { return }
        self?.view.informViewToLoadData()
    }
    
}

// MARK: - Extensions -

extension MainPresenter: MainPresenterInterface {
    
    func viewDidLoad() {
        subscribeNetworkManager()
//        getCartList()
        print("BURADAYIM 1")
    }
    
    func getNumberOfSection() -> Int {
        return formatter.returnNumberOfSection()
    }
    
    func getNumberOfItems(in section: Int) -> Int {
        return formatter.returnNumberOfItems(in: section)
    }
    
    func getWidgetComponentItem(index: Int) -> GenericDataProtocol? {
        return formatter.returnWidgetComponentItem(index: index)
    }
    
    func fireProductDetailFlow(item: String?) {
        guard let item = item, let data = formatter.returnProductViewComponentDataForDetail(item: item) else { return }
        wireframe.presentFurtherWireframes(Wireframes.detail(DetailWireframeData(productData: data)))
        
    }
}
